datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id           String        @id @default(cuid())
  externalId   String        @unique
  email        String        @unique
  name         String?
  fantasyTeams FantasyTeam[]
  roles        Role[]        @default([USER])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  avatarUrl    String?
}

enum Role {
  USER
  ADMIN
}

model Event {
  id            String         @id @default(cuid())
  name          String         @unique
  date          DateTime
  location      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  fantasyEvents FantasyEvent[]
  eventRunners  EventRunner[]
}

model FantasyEvent {
  id          String              @id @default(cuid())
  eventId     String
  event       Event               @relation(fields: [eventId], references: [id])
  name        String?
  teamSize    Int
  teamCount   Int                 @default(1)
  description String?
  status      FantasyEventStatus  @default(PENDING)
  prizes      FantasyEventPrize[]

  fantasyTeams FantasyTeam[]
  rules        FantasyTeamRule[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

model FantasyEventPrize {
  id          String @id @default(cuid())
  name        String
  description String
  rank        Int

  fantasyEventId String
  fantasyEvent   FantasyEvent @relation(fields: [fantasyEventId], references: [id])

  blobs FantasyEventPrizeBlob[]
}

model FantasyEventPrizeBlob {
  id   String @id @default(cuid())
  url  String
  name String

  fantasyEventPrizeId String
  fantasyEventPrize   FantasyEventPrize? @relation(fields: [fantasyEventPrizeId], references: [id], onDelete: Cascade)
}

enum FantasyEventStatus {
  PENDING
  LIVE
  COMPLETE
}

model Runner {
  id             String        @id @default(cuid())
  name           String
  genderDivision String
  events         EventRunner[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model EventRunner {
  id        String   @id @default(cuid())
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  runnerId  String
  runner    Runner   @relation(fields: [runnerId], references: [id])
  seed      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  seedNotes String?

  fantasyTeams FantasyTeamMember[]

  @@unique([eventId, runnerId])
}

model FantasyTeam {
  id                 String              @id @default(cuid())
  name               String?
  owner              User                @relation(fields: [userId], references: [id])
  userId             String
  teamMembers        FantasyTeamMember[]
  fantasyEvent       FantasyEvent?       @relation(fields: [fantasyEventId], references: [id])
  fantasyEventId     String?
  fantasyTeamWagerId String              @unique
  wager              FantasyTeamWager    @relation(fields: [fantasyTeamWagerId], references: [id])
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model FantasyTeamWager {
  id          String       @id @default(cuid())
  wager       Float
  fantasyTeam FantasyTeam?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model FantasyTeamRule {
  id             String         @id @default(cuid())
  pickNumberFrom Int
  pickNumberTo   Int
  rankMin        Int
  rankMax        Int?
  events         FantasyEvent[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model FantasyTeamMember {
  id            String      @id @default(cuid())
  fantasyTeamId String
  fantasyTeam   FantasyTeam @relation(fields: [fantasyTeamId], references: [id])
  eventRunnerId String
  runner        EventRunner @relation(fields: [eventRunnerId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  pickNumber    Int
}
