datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id           String        @id @default(cuid())
  externalId   String        @unique
  email        String        @unique
  name         String?
  fantasyTeams FantasyTeam[]
  roles        Role[]        @default([USER])
  venmoHandle  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  avatarUrl    String?
}

enum Role {
  USER
  ADMIN
}

model Event {
  id            String         @id @default(cuid())
  name          String         @unique
  date          DateTime
  location      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  fantasyEvents FantasyEvent[]
  eventRunners  EventRunner[]
  performances  Performance[]
}

model FantasyEvent {
  id       String @id @default(cuid())
  eventId  String
  event    Event  @relation(fields: [eventId], references: [id])
  teamSize Int

  fantasyTeams FantasyTeam[]
  rules        FantasyTeamRule[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

model Runner {
  id                 String              @id @default(cuid())
  name               String
  genderDivision     String
  performances       Performance[]
  events             EventRunner[]
  fantasyTeamMembers FantasyTeamMember[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model EventRunner {
  id        String   @id @default(cuid())
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  runnerId  String
  runner    Runner   @relation(fields: [runnerId], references: [id])
  seed      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([eventId, runnerId])
}

model Performance {
  id        String   @id @default(cuid())
  time      Float
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  runnerId  String
  runner    Runner   @relation(fields: [runnerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FantasyTeam {
  id                 String              @id @default(cuid())
  name               String?
  owner              User                @relation(fields: [userId], references: [id])
  userId             String
  FantasyTeamMember  FantasyTeamMember[]
  FantasyEvent       FantasyEvent?       @relation(fields: [fantasyEventId], references: [id])
  fantasyEventId     String?
  fantasyTeamWagerId String
  wager              FantasyTeamWager?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model FantasyTeamWager {
  id            String      @id @default(cuid())
  wager         Float
  fantasyTeamId String      @unique
  fantasyTeam   FantasyTeam @relation(fields: [fantasyTeamId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model FantasyTeamRule {
  id             String         @id @default(cuid())
  pickNumberFrom Int
  pickNumberTo   Int
  rankMin        Int
  rankMax        Int
  events         FantasyEvent[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model FantasyTeamMember {
  id            String      @id @default(cuid())
  fantasyTeamId String
  fantasyTeam   FantasyTeam @relation(fields: [fantasyTeamId], references: [id])
  runnerId      String
  runner        Runner      @relation(fields: [runnerId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
